environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python27-x64"
      PYTHON_EXE: "C:\\Python27-x64\\python.exe"
      TOXENV: 'test-py27'
      MPLBACKEND: 'Agg'
      PATH: "C:\\Python27-x64;$(PATH)"
    - PYTHON: "C:\\Python35-x64"
      PYTHON_EXE: "C:\\Python35-x64\\python.exe"
      TOXENV: 'test-py35'
      MPLBACKEND: 'Agg'
      PATH: "C:\\Python35-x64;$(PATH)"
    - PYTHON: "C:\\Python36-x64"
      PYTHON_EXE: "C:\\Python36-x64\\python.exe"
      TOXENV: 'test-py36'
      MPLBACKEND: 'Agg'
      PATH: "C:\\Python36-x64;$(PATH)"

install:
  # We need wheel installed to build wheels
  - cmd: "%PYTHON%\\python.exe -m pip install wheel tox numpy cython twine"

build: off

before_test:
  - cmd: "%PYTHON%\\python.exe setup.py build_ext"

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - cmd: echo %PATH%
  - cmd: SET PATH=%PYTHON%;%PATH%
  - cmd: "%PYTHON%\\Scripts\\tox --skip-missing-interpreters"

after_test:
  # This step builds your wheels.
  # Again, you only need if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - ps: if ($(& $env:PYTHON_EXE .\ci\get_version.py) -ne '') {& $env:PYTHON_EXE setup.py bdist_wheel} ELSE {echo "Not building because this is not a tag build"}
  - ps: if (& $env:PYTHON_EXE .\ci\get_version.py) {ls dist}

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
  - ps if ($(& $env:PYTHON_EXE .\ci\get_version.py) -ne '') {& $env:PYTHON_EXE setup.py bdist_wheel} ELSE {echo "Not building because this is not a tag build"}